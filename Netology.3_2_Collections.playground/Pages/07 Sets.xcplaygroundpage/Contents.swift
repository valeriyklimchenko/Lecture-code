/*:
 [← Кортеж](@previous)
 
 # Множества
 
 Множества (`Set`) представляют собой неупорядоченные коллекции уникальных элементов.
 
 В отличие от массивов в множествах элементы должны быть уникальными, мы не можем определить несколько элементов с одним и тем же значением.
 
 Для определения множества у переменной или константы устанавливается тип `Set`, где `Element` — это тип данных:
 
*/
/** Type code there */
let numbers: Set<Int> = [1, 2, 3, 5, 2]
let numbers2 = Set([1, 2, 3, 4])

let numbers3: Set<Int> = []
let numbers4 = Set<Int>()

let array1 = [1, 2, 3, 4, 5]
let array2 = [1, 2, 3, 5, 4]
array1 == array2

let set1: Set<Int> = [1, 2, 3, 4, 5]
let set2: Set<Int> = [1, 2, 3, 5, 4]
set1 == set2
//: При определении можно опускать тип:
/** Type code there */

//: Либо можно использовать функцию инициализатора `Set`:
/** Type code there */
let numbers55 = Set(array1)
let numbers5 = Set(arrayLiteral: 2, 3, 4, 5, 5)

//: Создание пустого множества:
/** Type code there */
let numbers6: Set<Int> = []
let numbers7 = Set<Int>()
/*:
 *  *  *  *  *
 ## Работа с множествами
 
 Метод `insert()` позволяет добавить новый элемент в множество:
 */
/** Type code there */
var numbers8 = Set([1, 2, 3, 4])
numbers8.insert(6)
numbers8.remove(at: numbers8.startIndex)
/*:
 Также множества поддерживают ряд операций по удалению:
 - `removeAtIndex()`: удаляет элемент по определенному индексу
 - `removeFirst()`: удаляет первый элемент
 - `remove()`: удаляет какой-то определенный элемент по значению
 - `removeAll()`: удаляет все элементы
 */
/** Type code there */
numbers8.remove(8)
//numbers8.removeAll()
//: Еще один метод `contains()` позволяет проверить наличие в множестве элемента:
/** Type code there */
numbers8.contains(8)
//: Хотя множество представляет неупорядоченный набор, но с помощью метода `sorted()` мы можем отсортировать его:
/** Type code there */

let array: [Int] = numbers8.sorted()
/*:
 *  *  *  *  *
 ## Операции над множествами
 
 Особую ценность среди операций представляют операции, предназначенные специально для множеств:
 - объединение,
 - пересечение,
 - разность множеств.
 
![Sets](sets.png)
 
 - `intersection()`: пересечение множеств,возвращает общие для обоих множеств элементы;
 - `symmetricDifference()`: возвращает не общие (непересекающиеся) для обоих множеств элементы (симметрическая разность);
 - `union()`: объединение двух множеств;
 - `subtract()`: разницамножеств, возвращает элементы первого
 множества, которые отсутствуют во втором.
 
 */
var a: Set = [1, 2, 3, 4, 5]
var b: Set = [4, 5, 6, 7, 8]

a.intersection(b)
a.symmetricDifference(b)
a.union(b)
a.subtracting(b)
/*:
 [→ Цикл for-in](@next)
 */
