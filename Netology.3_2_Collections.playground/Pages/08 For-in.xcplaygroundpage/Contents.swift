/*:
 [← Множества](@previous)
 
 # Цикл `for-in`
 
 С помощью цикла мы можем перебрать элементы коллекции (массивы, множества, словари) или последовательности.
 
 Он имеет следующую форму:
 
 ```
 for объект_последовательности in последовательность {
     
 }
 ```
 
 Например, переберем элементы массива:
 */
let range: ClosedRange<Int> = 1...5
for item in 1...5 {
    print(item)
}
/*:
 Выражение `1...5` образует последовательность из пяти чисел от 1 до 5.
 И цикл проходит по всем элементам последовательности. При каждом
 проходе он извлекает одно число и передает его в переменную `item`. Таким образом, цикл сработает пять раз.
 
 С помощью оператора `where` можно задавать условия выборки из последовательности элементов:
 */
for i in 0...10 where i % 2 == 0 {
    print(i) // 0, 2, 4, 6, 8, 10
}

for i in 0...10 {
    if i % 2 == 0 {
        print(i) // 0, 2, 4, 6, 8, 10
    }
}

/*:
 Здесь из последовательности `0...10` извлекаются только те элементы, которые соответствуют условию после оператора `where` — `i % 2 == 0`, то есть четные числа.

 [→ Цикл `while`](@next)

*/
